#!/usr/bin/env node
/* eslint-disable prettier/prettier */
const path = require('path');
const { readFileSync } = require('fs');
const yargs = require('yargs');
const { start, resize, prune } = require('../lib/node.js');
const pkg = JSON.parse(readFileSync(path.resolve(__dirname, '../package.json')).toString());

function builderOption() {
  return yargs.option({
    target: {
      alias: 't',
      describe: 'Target to build',
      default: '',
    },
    path: {
      alias: 'p',
      describe: 'Path to project',
      default: '.',
    },
    png2vg: {
      describe: 'image conversion',
      type: 'boolean',
      default: true,
    },
    jsc: {
      describe: 'Compile JS file to C or bin, [--jsc c|bin]',
      default: '',
    },
    prune: {
      describe: 'Prune unused js files',
      default: false,
      type: 'boolean',
    },
    pack: {
      describe: 'Pack zpk and zab or not',
      default: true,
      type: 'boolean',
    },
    'show-info': {
      describe: 'Show all image convert and js compile information lines',
      default: false,
      type: 'boolean',
    },
    compress: {
      alias: 'c',
      describe: 'Compress or not',
      default: false,
    },
    ip: {
      describe: 'Include Intermediate Products package',
      type: "boolean",
      default: true,
    },
    px: {
      describe: 'Px or not',
      default: true,
    },
    sources: {
      describe: 'device info',
      type: 'array',
      default: [],
    },
    st: {
      describe: 'target platform st info',
      type: 'array',
      default: [],
    },
    sr: {
      describe: 'target platform sr info',
      type: 'array',
      default: [],
    },
    cp: {
      describe: 'target platform cp info',
      type: 'array',
      default: [],
    },
    dw: {
      describe: 'target platform dw info',
      type: 'array',
      default: [],
    },
  });
}

function pruneOption() {
  return yargs.option({
    path: {
      alias: 'p',
      describe: 'Path to project',
      default: '.',
    },
    ip: {
      type: 'boolean',
      default: true,
    },
  })
}

function resizeOption() {
  return yargs.option({
    from: {
      describe: 'resize image source',
      type: 'string',
      default: '',
    },
    to: {
      describe: 'resize image destination',
      type: 'string',
      default: '',
    },
    dw: {
      describe: 'design width',
      type: 'number',
      default: 480,
    },
    tw: {
      describe: 'target width',
      type: 'number',
      default: 0,
    },
    direct: {
      alias: 'd',
      describe: 'resize a single file to [tw] directly',
      type: 'boolean',
      default: false,
    }
  });
}

const buildHandler = (buildMode) => {
  return (argv) => {
    const targets = argv.target ? (typeof argv.target === 'string' ? [argv.target] : argv.target) : [];

    start({
      ...argv,
      targets,
      buildMode,
    });
  };
};

const pruneHandler = (argv) => prune(argv);

const resizeHandler = (argv) => resize(argv);

yargs
  .usage('Usage: $0 <command> [options]')
  .command('cloud', '项目打包', builderOption, buildHandler('cloud'))
  .command('build', '项目打包', builderOption, buildHandler('production'))
  .command('dev', '项目打包', builderOption, buildHandler('development'))
  .command('preview', '项目打包', builderOption, buildHandler('preview'))
  .command('prune', '打包后清理', pruneOption, pruneHandler)
  .command('resize', '图片缩放', resizeOption, resizeHandler)
  .example('$0 build', '将当前目录文件进行打包')
  .example('$0 resize', '缩放图片工具')
  .version(`ZPM v${pkg.version}`)
  .alias('version', 'v')
  .alias('help', 'h').argv;
